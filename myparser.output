Terminals unused in grammar

    TK_POW
    TK_PLUEQ
    TK_MINEQ
    TK_MULEQ
    TK_DIVEQ
    TK_ASSIGN
    TK_EQEQ
    TK_NOTEQ
    TK_GREEQ
    TK_LESEQ
    KW_AND
    KW_OR
    KW_NOT
    KW_INTEGER
    KW_FOR
    KW_BREAK
    KW_DEF
    KW_ENDCOMP
    KW_SCALAR
    KW_CONST
    KW_IN
    KW_CONTINUE
    KW_ENDDEF
    KW_OF
    KW_STR
    KW_IF
    KW_ENDFOR
    KW_MAIN
    KW_BOOLEAN
    KW_ELSE
    KW_WHILE
    KW_RETURN
    KW_ENDIF
    KW_ENDWHILE
    KW_COMP
    KW_TRUE
    KW_FALSE


Grammar

    0 $accept: program $end

    1 program: listOfExprs

    2 listOfExprs: expr
    3            | listOfExprs ';' expr

    4 expr: TK_CONSTINT
    5     | TK_CONSTFLOAT
    6     | TK_IDENT
    7     | TK_CONSTSTR
    8     | expr '+' expr
    9     | expr '-' expr
   10     | expr '*' expr
   11     | expr '/' expr
   12     | '(' expr ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 12
    ')' (41) 12
    '*' (42) 10
    '+' (43) 8
    '-' (45) 9
    '/' (47) 11
    ';' (59) 3
    error (256)
    TK_IDENT <str> (258) 6
    TK_CONSTINT <str> (259) 4
    TK_CONSTFLOAT <str> (260) 5
    TK_CONSTSTR <str> (261) 7
    TK_POW (262)
    TK_PLUEQ (263)
    TK_MINEQ (264)
    TK_MULEQ (265)
    TK_DIVEQ (266)
    TK_ASSIGN (267)
    TK_EQEQ (268)
    TK_NOTEQ (269)
    TK_GREEQ (270)
    TK_LESEQ (271)
    KW_AND (272)
    KW_OR (273)
    KW_NOT (274)
    KW_INTEGER (275)
    KW_FOR (276)
    KW_BREAK (277)
    KW_DEF (278)
    KW_ENDCOMP (279)
    KW_SCALAR (280)
    KW_CONST (281)
    KW_IN (282)
    KW_CONTINUE (283)
    KW_ENDDEF (284)
    KW_OF (285)
    KW_STR (286)
    KW_IF (287)
    KW_ENDFOR (288)
    KW_MAIN (289)
    KW_BOOLEAN (290)
    KW_ELSE (291)
    KW_WHILE (292)
    KW_RETURN (293)
    KW_ENDIF (294)
    KW_ENDWHILE (295)
    KW_COMP (296)
    KW_TRUE (297)
    KW_FALSE (298)


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    program (52)
        on left: 1
        on right: 0
    listOfExprs <str> (53)
        on left: 2 3
        on right: 1 3
    expr <str> (54)
        on left: 4 5 6 7 8 9 10 11 12
        on right: 2 3 8 9 10 11 12


State 0

    0 $accept: . program $end
    1 program: . listOfExprs
    2 listOfExprs: . expr
    3            | . listOfExprs ';' expr
    4 expr: . TK_CONSTINT
    5     | . TK_CONSTFLOAT
    6     | . TK_IDENT
    7     | . TK_CONSTSTR
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . '(' expr ')'

    TK_IDENT       shift, and go to state 1
    TK_CONSTINT    shift, and go to state 2
    TK_CONSTFLOAT  shift, and go to state 3
    TK_CONSTSTR    shift, and go to state 4
    '('            shift, and go to state 5

    program      go to state 6
    listOfExprs  go to state 7
    expr         go to state 8


State 1

    6 expr: TK_IDENT .

    $default  reduce using rule 6 (expr)


State 2

    4 expr: TK_CONSTINT .

    $default  reduce using rule 4 (expr)


State 3

    5 expr: TK_CONSTFLOAT .

    $default  reduce using rule 5 (expr)


State 4

    7 expr: TK_CONSTSTR .

    $default  reduce using rule 7 (expr)


State 5

    4 expr: . TK_CONSTINT
    5     | . TK_CONSTFLOAT
    6     | . TK_IDENT
    7     | . TK_CONSTSTR
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . '(' expr ')'
   12     | '(' . expr ')'

    TK_IDENT       shift, and go to state 1
    TK_CONSTINT    shift, and go to state 2
    TK_CONSTFLOAT  shift, and go to state 3
    TK_CONSTSTR    shift, and go to state 4
    '('            shift, and go to state 5

    expr  go to state 9


State 6

    0 $accept: program . $end

    $end  shift, and go to state 10


State 7

    1 program: listOfExprs .  [$end]
    3 listOfExprs: listOfExprs . ';' expr

    ';'  shift, and go to state 11

    $default  reduce using rule 1 (program)


State 8

    2 listOfExprs: expr .  [$end, ';']
    8 expr: expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr

    '+'  shift, and go to state 12
    '-'  shift, and go to state 13
    '*'  shift, and go to state 14
    '/'  shift, and go to state 15

    $default  reduce using rule 2 (listOfExprs)


State 9

    8 expr: expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   12     | '(' expr . ')'

    '+'  shift, and go to state 12
    '-'  shift, and go to state 13
    '*'  shift, and go to state 14
    '/'  shift, and go to state 15
    ')'  shift, and go to state 16


State 10

    0 $accept: program $end .

    $default  accept


State 11

    3 listOfExprs: listOfExprs ';' . expr
    4 expr: . TK_CONSTINT
    5     | . TK_CONSTFLOAT
    6     | . TK_IDENT
    7     | . TK_CONSTSTR
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . '(' expr ')'

    TK_IDENT       shift, and go to state 1
    TK_CONSTINT    shift, and go to state 2
    TK_CONSTFLOAT  shift, and go to state 3
    TK_CONSTSTR    shift, and go to state 4
    '('            shift, and go to state 5

    expr  go to state 17


State 12

    4 expr: . TK_CONSTINT
    5     | . TK_CONSTFLOAT
    6     | . TK_IDENT
    7     | . TK_CONSTSTR
    8     | . expr '+' expr
    8     | expr '+' . expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . '(' expr ')'

    TK_IDENT       shift, and go to state 1
    TK_CONSTINT    shift, and go to state 2
    TK_CONSTFLOAT  shift, and go to state 3
    TK_CONSTSTR    shift, and go to state 4
    '('            shift, and go to state 5

    expr  go to state 18


State 13

    4 expr: . TK_CONSTINT
    5     | . TK_CONSTFLOAT
    6     | . TK_IDENT
    7     | . TK_CONSTSTR
    8     | . expr '+' expr
    9     | . expr '-' expr
    9     | expr '-' . expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   12     | . '(' expr ')'

    TK_IDENT       shift, and go to state 1
    TK_CONSTINT    shift, and go to state 2
    TK_CONSTFLOAT  shift, and go to state 3
    TK_CONSTSTR    shift, and go to state 4
    '('            shift, and go to state 5

    expr  go to state 19


State 14

    4 expr: . TK_CONSTINT
    5     | . TK_CONSTFLOAT
    6     | . TK_IDENT
    7     | . TK_CONSTSTR
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   10     | expr '*' . expr
   11     | . expr '/' expr
   12     | . '(' expr ')'

    TK_IDENT       shift, and go to state 1
    TK_CONSTINT    shift, and go to state 2
    TK_CONSTFLOAT  shift, and go to state 3
    TK_CONSTSTR    shift, and go to state 4
    '('            shift, and go to state 5

    expr  go to state 20


State 15

    4 expr: . TK_CONSTINT
    5     | . TK_CONSTFLOAT
    6     | . TK_IDENT
    7     | . TK_CONSTSTR
    8     | . expr '+' expr
    9     | . expr '-' expr
   10     | . expr '*' expr
   11     | . expr '/' expr
   11     | expr '/' . expr
   12     | . '(' expr ')'

    TK_IDENT       shift, and go to state 1
    TK_CONSTINT    shift, and go to state 2
    TK_CONSTFLOAT  shift, and go to state 3
    TK_CONSTSTR    shift, and go to state 4
    '('            shift, and go to state 5

    expr  go to state 21


State 16

   12 expr: '(' expr ')' .

    $default  reduce using rule 12 (expr)


State 17

    3 listOfExprs: listOfExprs ';' expr .  [$end, ';']
    8 expr: expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr

    '+'  shift, and go to state 12
    '-'  shift, and go to state 13
    '*'  shift, and go to state 14
    '/'  shift, and go to state 15

    $default  reduce using rule 3 (listOfExprs)


State 18

    8 expr: expr . '+' expr
    8     | expr '+' expr .  [$end, '+', '-', ';', ')']
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr

    '*'  shift, and go to state 14
    '/'  shift, and go to state 15

    $default  reduce using rule 8 (expr)

    Conflict between rule 8 and token '+' resolved as reduce (%left '+').
    Conflict between rule 8 and token '-' resolved as reduce (%left '-').
    Conflict between rule 8 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 8 and token '/' resolved as shift ('+' < '/').


State 19

    8 expr: expr . '+' expr
    9     | expr . '-' expr
    9     | expr '-' expr .  [$end, '+', '-', ';', ')']
   10     | expr . '*' expr
   11     | expr . '/' expr

    '*'  shift, and go to state 14
    '/'  shift, and go to state 15

    $default  reduce using rule 9 (expr)

    Conflict between rule 9 and token '+' resolved as reduce (%left '+').
    Conflict between rule 9 and token '-' resolved as reduce (%left '-').
    Conflict between rule 9 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 9 and token '/' resolved as shift ('-' < '/').


State 20

    8 expr: expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   10     | expr '*' expr .  [$end, '+', '-', '*', '/', ';', ')']
   11     | expr . '/' expr

    $default  reduce using rule 10 (expr)

    Conflict between rule 10 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 10 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 10 and token '*' resolved as reduce (%left '*').
    Conflict between rule 10 and token '/' resolved as reduce (%left '/').


State 21

    8 expr: expr . '+' expr
    9     | expr . '-' expr
   10     | expr . '*' expr
   11     | expr . '/' expr
   11     | expr '/' expr .  [$end, '+', '-', '*', '/', ';', ')']

    $default  reduce using rule 11 (expr)

    Conflict between rule 11 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 11 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 11 and token '*' resolved as reduce (%left '*').
    Conflict between rule 11 and token '/' resolved as reduce (%left '/').
